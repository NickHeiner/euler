module Euler

    (* Problem #1

       If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
       The sum of these multiples is 23.

       Find the sum of all the multiples of 3 or 5 below 1000. *)
    let sumNums upperBound =
        seq { 0 .. upperBound - 1 }
        |> Seq.filter (fun i -> i % 3 = 0 || i % 5 = 0)
        |> Seq.sum  

    (* Problem #2

       Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

           1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

       By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms. *)
    let fibUpTo upperBound =
        let rec addNum = function
            | hd::tl as soFar when hd >= upperBound -> Seq.skipWhile (fun x -> x > upperBound) soFar |> Seq.toList 
            | prev::prev'::rest as soFar -> addNum ((prev + prev')::soFar)
            | _ -> invalidArg "soFar" "list must have the first two values of the fib seq"
        addNum [1; 1] |> List.rev

    let sumFib = 
        4e6 |> int |> fibUpTo |> List.toSeq |> Seq.filter (fun i -> i % 2 = 0) |> Seq.sum
        
        